// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using ClientApi;
using Newtonsoft.Json.Linq;
using SpacetimeDB;

namespace SpacetimeDB.Types
{
	public enum ReducerType
	{
		None,
		AddItemToInventory,
		ChatMessage,
		CreatePlayer,
		DumpInventory,
		Extract,
		MoveOrSwapInventorySlot,
		MovePlayer,
		ResourceSpawnerAgent,
		StopPlayer,
		UpdateAnimation,
	}

	public partial class ReducerEvent : ReducerEventBase
	{
		public ReducerType Reducer { get; private set; }

		public ReducerEvent(ReducerType reducer, string reducerName, ulong timestamp, SpacetimeDB.Identity identity, string errMessage, ClientApi.Event.Types.Status status, object args)
			: base(reducerName, timestamp, identity, errMessage, status, args)
		{
			Reducer = reducer;
		}

		public AddItemToInventoryArgsStruct AddItemToInventoryArgs
		{
			get
			{
				if (Reducer != ReducerType.AddItemToInventory) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "AddItemToInventory");
				return (AddItemToInventoryArgsStruct)Args;
			}
		}
		public ChatMessageArgsStruct ChatMessageArgs
		{
			get
			{
				if (Reducer != ReducerType.ChatMessage) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "ChatMessage");
				return (ChatMessageArgsStruct)Args;
			}
		}
		public CreatePlayerArgsStruct CreatePlayerArgs
		{
			get
			{
				if (Reducer != ReducerType.CreatePlayer) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "CreatePlayer");
				return (CreatePlayerArgsStruct)Args;
			}
		}
		public DumpInventoryArgsStruct DumpInventoryArgs
		{
			get
			{
				if (Reducer != ReducerType.DumpInventory) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "DumpInventory");
				return (DumpInventoryArgsStruct)Args;
			}
		}
		public ExtractArgsStruct ExtractArgs
		{
			get
			{
				if (Reducer != ReducerType.Extract) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "Extract");
				return (ExtractArgsStruct)Args;
			}
		}
		public MoveOrSwapInventorySlotArgsStruct MoveOrSwapInventorySlotArgs
		{
			get
			{
				if (Reducer != ReducerType.MoveOrSwapInventorySlot) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "MoveOrSwapInventorySlot");
				return (MoveOrSwapInventorySlotArgsStruct)Args;
			}
		}
		public MovePlayerArgsStruct MovePlayerArgs
		{
			get
			{
				if (Reducer != ReducerType.MovePlayer) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "MovePlayer");
				return (MovePlayerArgsStruct)Args;
			}
		}
		public ResourceSpawnerAgentArgsStruct ResourceSpawnerAgentArgs
		{
			get
			{
				if (Reducer != ReducerType.ResourceSpawnerAgent) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "ResourceSpawnerAgent");
				return (ResourceSpawnerAgentArgsStruct)Args;
			}
		}
		public StopPlayerArgsStruct StopPlayerArgs
		{
			get
			{
				if (Reducer != ReducerType.StopPlayer) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "StopPlayer");
				return (StopPlayerArgsStruct)Args;
			}
		}
		public UpdateAnimationArgsStruct UpdateAnimationArgs
		{
			get
			{
				if (Reducer != ReducerType.UpdateAnimation) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "UpdateAnimation");
				return (UpdateAnimationArgsStruct)Args;
			}
		}

		public object[] GetArgsAsObjectArray()
		{
			switch (Reducer)
			{
				case ReducerType.AddItemToInventory:
				{
					var args = AddItemToInventoryArgs;
					return new object[] {
						args.EntityId,
						args.ItemId,
						args.PocketIdx,
						args.ItemCount,
					};
				}
				case ReducerType.ChatMessage:
				{
					var args = ChatMessageArgs;
					return new object[] {
						args.Message,
					};
				}
				case ReducerType.CreatePlayer:
				{
					var args = CreatePlayerArgs;
					return new object[] {
						args.Username,
					};
				}
				case ReducerType.DumpInventory:
				{
					var args = DumpInventoryArgs;
					return new object[] {
						args.EntityId,
					};
				}
				case ReducerType.Extract:
				{
					var args = ExtractArgs;
					return new object[] {
						args.EntityId,
						args.ResourceEntityId,
					};
				}
				case ReducerType.MoveOrSwapInventorySlot:
				{
					var args = MoveOrSwapInventorySlotArgs;
					return new object[] {
						args.PlayerEntityId,
						args.InventoryEntityId,
						args.SourcePocketIdx,
						args.DestPocketIdx,
					};
				}
				case ReducerType.MovePlayer:
				{
					var args = MovePlayerArgs;
					return new object[] {
						args.Start,
						args.Direction,
					};
				}
				case ReducerType.ResourceSpawnerAgent:
				{
					var args = ResourceSpawnerAgentArgs;
					return new object[] {
						args.PrevTime,
					};
				}
				case ReducerType.StopPlayer:
				{
					var args = StopPlayerArgs;
					return new object[] {
						args.Location,
					};
				}
				case ReducerType.UpdateAnimation:
				{
					var args = UpdateAnimationArgs;
					return new object[] {
						args.EntityId,
						args.Moving,
						args.ActionTargetEntityId,
					};
				}
				default: throw new System.Exception($"Unhandled reducer case: {Reducer}. Please run SpacetimeDB code generator");
			}
		}
	}
}
